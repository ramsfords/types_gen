// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: restaurant.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RestaurantAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RestaurantAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestaurantAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestaurantAddressMultiError, or nil if none found.
func (m *RestaurantAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *RestaurantAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street1

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	// no validation rules for ZipCode

	// no validation rules for Type

	if len(errors) > 0 {
		return RestaurantAddressMultiError(errors)
	}

	return nil
}

// RestaurantAddressMultiError is an error wrapping multiple validation errors
// returned by RestaurantAddress.ValidateAll() if the designated constraints
// aren't met.
type RestaurantAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestaurantAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestaurantAddressMultiError) AllErrors() []error { return m }

// RestaurantAddressValidationError is the validation error returned by
// RestaurantAddress.Validate if the designated constraints aren't met.
type RestaurantAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestaurantAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestaurantAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestaurantAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestaurantAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestaurantAddressValidationError) ErrorName() string {
	return "RestaurantAddressValidationError"
}

// Error satisfies the builtin error interface
func (e RestaurantAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestaurantAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestaurantAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestaurantAddressValidationError{}

// Validate checks the field values on OpenWindow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpenWindow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenWindow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OpenWindowMultiError, or
// nil if none found.
func (m *OpenWindow) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenWindow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Type

	if len(errors) > 0 {
		return OpenWindowMultiError(errors)
	}

	return nil
}

// OpenWindowMultiError is an error wrapping multiple validation errors
// returned by OpenWindow.ValidateAll() if the designated constraints aren't met.
type OpenWindowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenWindowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenWindowMultiError) AllErrors() []error { return m }

// OpenWindowValidationError is the validation error returned by
// OpenWindow.Validate if the designated constraints aren't met.
type OpenWindowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenWindowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenWindowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenWindowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenWindowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenWindowValidationError) ErrorName() string { return "OpenWindowValidationError" }

// Error satisfies the builtin error interface
func (e OpenWindowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenWindow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenWindowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenWindowValidationError{}

// Validate checks the field values on Hours with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Hours) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hours with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HoursMultiError, or nil if none found.
func (m *Hours) ValidateAll() error {
	return m.validate(true)
}

func (m *Hours) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOpenHours() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HoursValidationError{
						field:  fmt.Sprintf("OpenHours[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HoursValidationError{
						field:  fmt.Sprintf("OpenHours[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HoursValidationError{
					field:  fmt.Sprintf("OpenHours[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HoursMultiError(errors)
	}

	return nil
}

// HoursMultiError is an error wrapping multiple validation errors returned by
// Hours.ValidateAll() if the designated constraints aren't met.
type HoursMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HoursMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HoursMultiError) AllErrors() []error { return m }

// HoursValidationError is the validation error returned by Hours.Validate if
// the designated constraints aren't met.
type HoursValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HoursValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HoursValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HoursValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HoursValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HoursValidationError) ErrorName() string { return "HoursValidationError" }

// Error satisfies the builtin error interface
func (e HoursValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHours.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HoursValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HoursValidationError{}

// Validate checks the field values on CreateRestaurantData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRestaurantData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRestaurantData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRestaurantDataMultiError, or nil if none found.
func (m *CreateRestaurantData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRestaurantData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for RestaurantName

	// no validation rules for RestaurantWebUrl

	// no validation rules for RestaurantS3DevUrl

	// no validation rules for RestaurantS3StaticProdUrl

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRestaurantDataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRestaurantDataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRestaurantDataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for OwnerId

	{
		sorted_keys := make([]string, len(m.GetOpenHours()))
		i := 0
		for key := range m.GetOpenHours() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetOpenHours()[key]
			_ = val

			// no validation rules for OpenHours[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateRestaurantDataValidationError{
							field:  fmt.Sprintf("OpenHours[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateRestaurantDataValidationError{
							field:  fmt.Sprintf("OpenHours[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateRestaurantDataValidationError{
						field:  fmt.Sprintf("OpenHours[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Type

	// no validation rules for Pk

	// no validation rules for Sk

	// no validation rules for GoogleMapViewportUrl

	// no validation rules for S3StaticImagesUrl

	// no validation rules for AuthEmail

	// no validation rules for UserName

	// no validation rules for Origin

	// no validation rules for TokenKey

	// no validation rules for RestaurantIds

	if len(errors) > 0 {
		return CreateRestaurantDataMultiError(errors)
	}

	return nil
}

// CreateRestaurantDataMultiError is an error wrapping multiple validation
// errors returned by CreateRestaurantData.ValidateAll() if the designated
// constraints aren't met.
type CreateRestaurantDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRestaurantDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRestaurantDataMultiError) AllErrors() []error { return m }

// CreateRestaurantDataValidationError is the validation error returned by
// CreateRestaurantData.Validate if the designated constraints aren't met.
type CreateRestaurantDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRestaurantDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRestaurantDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRestaurantDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRestaurantDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRestaurantDataValidationError) ErrorName() string {
	return "CreateRestaurantDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRestaurantDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRestaurantData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRestaurantDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRestaurantDataValidationError{}

// Validate checks the field values on RestaurantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestaurantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestaurantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestaurantResponseMultiError, or nil if none found.
func (m *RestaurantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestaurantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Id

	if len(errors) > 0 {
		return RestaurantResponseMultiError(errors)
	}

	return nil
}

// RestaurantResponseMultiError is an error wrapping multiple validation errors
// returned by RestaurantResponse.ValidateAll() if the designated constraints
// aren't met.
type RestaurantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestaurantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestaurantResponseMultiError) AllErrors() []error { return m }

// RestaurantResponseValidationError is the validation error returned by
// RestaurantResponse.Validate if the designated constraints aren't met.
type RestaurantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestaurantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestaurantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestaurantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestaurantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestaurantResponseValidationError) ErrorName() string {
	return "RestaurantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestaurantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestaurantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestaurantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestaurantResponseValidationError{}
